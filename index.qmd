---
title: "Simulation Challenge"
"Eesha Shahi"
subtitle: "Generative Models and Monte Carlo Simulation"
format:
  html: default
execute:
  echo: false
  eval: true
  python:
    reticulate: false

---

# 🎲 Simulation Challenge - Monte Carlo Analysis

## Challenge Overview

**Your Mission:** Create a comprehensive Quarto document that simulates one or two investment strategies, analyzes the results, and demonstrates your ability to present counter-intuitive findings compellingly. Then render the document to HTML and deploy it via GitHub Pages from a new repository called "simulationChallenge."

::: {.callout-warning}
## ⚠️ AI Partnership Required

This challenge pushes boundaries intentionally. You'll tackle problems that normally require weeks of study, but with Cursor AI as your partner (and your brain keeping it honest), you can accomplish more than you thought possible.

**The new reality:** The four stages of competence are Ignorance → Awareness → Learning → Mastery. AI lets us produce Mastery-level work while operating primarily in the Awareness stage. I focus on awareness training, you leverage AI for execution, and together we create outputs that used to require years of dedicated study.
:::

## The Investment Game 🎯

### Original Game Strategy

::: {#exm-ErgodicityEconomicsExample}
Imagine you are offered the following game and given a $1,000 budget in a special account to play the game: I will flip a coin, and if it comes up heads, we increase your account's balance by 50%; if it comes up tails, we reduce your account's balance by 40%. We are not only doing this once, but we will do it once per year until you turn 55. When you turn 55, you will receive the balance in your account.
:::

### Generative DAG Model for the Investment Game

```{python}
#| label: fig-investment-dag
#| fig-cap: Generative DAG model for the investment game showing how wealth evolves over time through coin flips
#| echo: false
#| python.reticulate: false
import daft

# Create the DAG directly without custom class
investmentDAG = daft.PGM(dpi=150, alternate_style="outer")

# Initial wealth (deterministic)
investmentDAG.add_node("W0", "Initial Wealth\n$W_0 = 1000$", x=4, y=2.5, aspect=5.4, 
                      alternate=True, plot_params={'facecolor': 'aliceblue'})

# Time t nodes  
investmentDAG.add_node("Ct", "Coin Flip t\n$C_t \\sim \\text{Bernoulli}(0.5)$", x=0, y=1, aspect=4, scale = 1.6,
                      plot_params={'facecolor': 'aliceblue'})
investmentDAG.add_node("Wt", "\nWealth t\n$W_t = 1.5 \\times W_{t-1}$ if $C_t = 1$\n$W_t = 0.6 \\times W_{t-1}$ if $C_t = 0$\n", x=4, y=1, scale = 1.6, aspect=4,
                      alternate=True, plot_params={'facecolor': 'aliceblue'})

# Add edges showing the relationships
investmentDAG.add_edge("W0", "Wt")
investmentDAG.add_edge("Ct", "Wt")

# Add plate around time-dependent nodes
investmentDAG.add_plate([-2, 0.5, 7.8, 1.0], label="t = 1, ..., N", shift=-0.1)

# Display the DAG
investmentDAG.show()
```


## Challenge Requirements 📋

### Minimum Requirements for Any Points on Challenge

1. **Create a Quarto Document:** Write a concise quarto markdown file that includes a narrative of what you are doing along with the requested code, results, and visualizations of your simulations.

   ::: {.callout-tip}
   ## 💡 Pro Tip: Source File Reference
   
   **Need help with Quarto syntax or DAFT diagrams?** You can find the complete source `.qmd` file for this challenge at:
   
   **GitHub Repository:** [flyaflya/buad442Fall2025/challenges/03-Simulation-Challenge/simulationChallenge.qmd](https://github.com/flyaflya/buad442Fall2025/blob/main/challenges/03-Simulation-Challenge/simulationChallenge.qmd)
   
   This is a great resource for understanding Quarto syntax, seeing how DAFT diagrams are implemented, and learning from the complete working example!
   :::

2. **Render to HTML:** You must render the quarto markdown file to HTML.

3. **GitHub Repository:** The rendered HTML must be uploaded to a new GitHub repository called "simulationChallenge" in your Github account.

4. **GitHub Pages Setup:** The repository should be made the source of your github pages:

   - Go to your repository settings (click the "Settings" tab in your GitHub repository)
   - Scroll down to the "Pages" section in the left sidebar
   - Under "Source", select "Deploy from a branch"
   - Choose "main" branch and "/ (root)" folder
   - Click "Save"
   - Your site will be available at: `https://[your-username].github.io/simulationChallenge/`
   - **Note:** It may take a few minutes for the site to become available after enabling Pages

## Grading Rubric 🎓

### Questions to Answer for 75% Grade on Challenge

1. **Expected Value Analysis:** What is the "expected value" of your account balance after 1 coin flip for the original game?
## The expected value of your account balance after 1 coin flip is $1050.

2. **Expectation vs. Reality:** Is the expected value positive or negative? Do you expect your account to be worth more or less than $1,000 based on this result?
## The expected value is positive. I expect my amount to be worth more than 1000 dollars.

3. **Single Simulation:** Run one simulation showing the dynamics of your account balance over time. Make an object-oriented matplotlib OR ggplot2 plot showing your simulated account balance over time (i.e. as you age). Comment on the results, are you happy?

**Answer:** A single object-oriented matplotlib simulation was run (ages 25–55) starting from $1,000. The resulting figure is embedded below.

![](single_simulation_plot.png){fig-cap="Single simulation of account balance (ages 25–55) with OO matplotlib"}

**Commentary:** The path ends at approximately $0.84 after 30 years (−99.9%), with 9 heads and 21 tails. Despite a positive expected value per flip, multiplicative compounding and volatility drag dominate typical trajectories—this is an instance of the ergodicity problem. Am I happy? No—this outcome is catastrophic and highlights why relying on expectation alone is misleading.


### Questions to Answer for 85% Grade on Challenge

4. **Multiple Simulations:** Run 100 simulations modelling the dynamics of your account balance over time. Make an object-oriented matplotlib OR ggplot2 plot showing a probability distribution of the 100 simulatedaccount balance at age 55. Comment on the results, are you happy? Why or why not?

**Answer:** 100 simulations were run using object-oriented matplotlib, showing the distribution of final account balances at age 55. The resulting figure is embedded below.

![](multiple_simulations_distribution.png){fig-cap="Distribution of final account balances from 100 simulations (ages 25–55) with OO matplotlib - linear scale with values >$10,000 grouped"}

**Key Results:**
- Mean final balance: $2,379
- Median final balance: $206  
- Probability of ending above $1,000: 31.0%
- Probability of ending above $10,000: 6.0%
- 43% of simulations resulted in catastrophic losses (<$100)

**Commentary:** Am I happy? No—this is deeply concerning. The linear-scale histogram with smaller buckets clearly shows the distribution's true nature: a massive concentration of catastrophic losses (red bars <$100) and moderate losses (orange bars $100-$1,000), with only a few profitable outcomes (green bars >$1,000). The 6 simulations above $10,000 are grouped together, but even this "success" represents just 6% of all paths. While the mean suggests profitability, the median reveals the harsh reality: most people lose money. This demonstrates the ergodicity problem: mathematical expectation is positive, but typical individual outcomes are devastating. The 31% success rate means 69% of people face financial ruin, highlighting why simulation is crucial for understanding real-world risk.

### Questions to Answer for 95% Grade on Challenge

5. **Probability Analysis:** Based on the 100 simulations above, what is the probability that your account balance will be greater than $1,000 at age 55?

**Answer:** Based on the 100 simulations conducted above, the probability that your account balance will be greater than $1,000 at age 55 is **31.0%**.

**Detailed Analysis:**
- Out of 100 simulations, 31 ended with a balance above $1,000
- This means 69% of simulations resulted in losses relative to the initial investment
- The distribution shows that most people (69%) face financial ruin in this investment strategy
- Only about 1 in 3 people would end up better off than they started

**Interpretation:** This low probability (31%) demonstrates the high risk nature of this investment strategy. Despite having a positive expected value mathematically, the vast majority of individual outcomes are unfavorable, highlighting the critical difference between mathematical expectation and real-world individual experience—the core concept of the ergodicity problem in economics.

### Questions to Answer for 100% Grade on Challenge

6. **Strategy Comparison:** Run 100 simulations for the modified game strategy shown below in @exm-ErgodicityEconomicsExampleModified. What is the probability that your account balance will be greater than $10,000 at age 55? Is this probability higher or lower than the probability in the original game?

**Answer:** 100 simulations were run for the modified strategy (betting exactly 50% of balance each round) using object-oriented matplotlib. The resulting distribution plot is embedded below.

![](modified_strategy_distribution.png){fig-cap="Distribution of final account balances from 100 simulations of modified strategy (50% betting) with OO matplotlib - linear scale with values >$10,000 grouped"}

**Modified Strategy Results:**
- Probability of ending above $10,000: **1.0%**
- Probability of ending above $1,000: **45.0%**
- Mean final balance: $2,012
- Median final balance: $1,000
- Only 1% of simulations resulted in catastrophic losses (<$100)

**Comparison with Original Strategy:**
- **P(Balance > $10,000): 1.0% vs 6.0%** → **LOWER** in modified strategy
- **P(Balance > $1,000): 45.0% vs 31.0%** → **HIGHER** in modified strategy

**Analysis:** The modified strategy shows a classic risk-return trade-off. The linear-scale histogram with smaller buckets clearly reveals the distribution's characteristics: most outcomes cluster around the $1,000 median (orange and green bars), with very few extreme values. The single simulation above $10,000 is grouped at the threshold, representing just 1% of all paths. By only betting 50% of the balance, it creates a "safety net" that prevents total ruin (only 1% catastrophic losses vs 43% in original) and improves the probability of staying above $1,000. However, this conservative approach severely limits upside potential, reducing the chance of reaching $10,000+ from 6% to just 1%. The strategy prioritizes capital preservation over explosive growth, demonstrating how position sizing fundamentally changes risk-return characteristics.

